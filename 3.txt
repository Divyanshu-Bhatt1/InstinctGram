import React,{useState,useEffect,useRef} from 'react'
import Nav from './Nav'
import './css/reels.css'
import axios from "axios";
import InfiniteScroll from "react-infinite-scroll-component";
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faVolumeUp ,faUser ,faVolumeMute ,faPlay,faHeart,faComment,faPaperPlane } from '@fortawesome/free-solid-svg-icons';

export default function Reels() {
  const [reel, setReel] = useState(null);
  const [mark, setMark] = useState(true);
  const [page, setPage] = useState(1);
  const videoRefs = useRef([]);
  const [currentIndex, setCurrentIndex] = useState(0); 
  const [vol,setVol]=useState(false)
  const [play,setPlay]=useState([])
  const [color,setColor]=useState(true)
  const [expanded, setExpanded] = useState([]);
  // const [detail,setDetail]=useState([])
  const [like,setLike]=useState([])
  

const handleLike=async(id)=>{
  console.log(id,"hai")
    setColor(!color);
    if(!color)
    {
      try { 
        const response = await axios.get(
          `http://localhost:3001/UnLike?id=${id}`,
          {
            withCredentials: true,
          },
        );
         
        console.log(response.status," ",response.data)
        
      } catch (error) {
        console.log(error);
      }
    }else{
      try { 
        const response = await axios.get(
          `http://localhost:3001/Like?id=${id}`,
          {
            withCredentials: true,
          },
        );
         
        console.log(response.status," ",response.data)
        
      } catch (error) {
        console.log(error);
      }
    }
}

const handleExp=(index)=>{
  setExpanded(prevExp => {
    const newExp = [...prevExp];
    newExp[index] = !newExp[index];
    return newExp;
});
}

 const handleVol=()=>{
    setVol(!vol);
        
    // Mute/unmute all videos
    videoRefs.current.forEach(video => {
        video.muted = !vol;
    });
 }

 const handlePlay=(index)=>{
 

  setExpanded(prevExp => {
    const newExp = [...prevExp];
    newExp[index] = false;
    return newExp;
});


  setPlay(prevPlay => {
    const newPlay = [...prevPlay];
    newPlay[index] = !newPlay[index];
    return newPlay;
});

if (!play[index]) {
    videoRefs.current[index].pause();
} else {
    videoRefs.current[index].play();
}
}
 
  const handleSlide = () => {
   
    
    const reelContainer = document.getElementById('scrollableDiv');
    const scrollPosition = reelContainer.scrollTop;
    const videoWidth = reelContainer.offsetWidth;
    let index = Math.round(scrollPosition / videoWidth);
    if(index!==0)
    {
      index=Math.round(index/2);
    }
    setCurrentIndex(index);
    
    console.log("reelContainer.scrollTop : ",reelContainer.scrollTop," reelContainer.offsetWidth : ",reelContainer.offsetWidth)
    console.log('Current Index:', index);
    
  };


  useEffect(()=>{
        
        getReel();
        // eslint-disable-next-line
  },[])

  const getReel = async () => {
    try {
      const response = await axios.get(
        `http://localhost:3001/reels-vid?limit=6&page=${page}`,
        {
          withCredentials: true,
        },
      );

      if (response.data.vidArr.length === 0) {
        setMark(false);
      }
      // console.log(response.data.vidArr,response.data.likeCountValues)
      setReel((prevCard) =>
        prevCard
          ? [...prevCard, ...response.data.vidArr]
          : response.data.vidArr,
      );
      setPlay(prevPlay => [...prevPlay, ...new Array(response.data.vidArr.length).fill(false)]);
      setExpanded(prevExp => [...prevExp, ...new Array(response.data.vidArr.length).fill(false)]);
      setLike((prevLike) =>
        prevLike
          ? [...prevLike, ...response.data.likeCountValues]
          : response.data.likeCountValues,
      );
      
      setPage(prevPage => prevPage + 1);

    } catch (error) {
      console.log(error);
    }
  };

  useEffect(()=>{
    console.log(like);
  },[like])
  
 
  useEffect(() => {
    console.log("index : ",currentIndex)
    if (reel && typeof currentIndex !== 'undefined') {
      videoRefs.current[currentIndex].currentTime = 0;
      setPlay(prevPlay => {
        const newPlay = [...prevPlay];
        newPlay[currentIndex] = false;
        return newPlay;
    });

        videoRefs.current.forEach((video, index) => {
            if (index === currentIndex) {
                video.play(); 
            } else {
                video.pause();
            }
        });
    }
}, [currentIndex, reel,videoRefs]);


  return (
    <div className='home-cont'>
       {/* <h1>i am home</h1> */}
       <div className='nav-home'>
       <Nav/>
       </div>
       <div className='content-home'>
               <div className='reels-cont' >
                    
               <div className='reels-child' >     
                    {reel && <InfiniteScroll
                          dataLength={reel.length}
                          next={getReel}
                          hasMore={mark}
                          loader={<h4>Wait ...</h4>}
                          onScroll={handleSlide}
                           endMessage={
                             <p style={{ textAlign: "center" }}>
                              <b>Yay! You have seen it all</b>
                              </p>
                            }
                          scrollableTarget="scrollableDiv"
                         
                       >
                       <div  id='scrollableDiv' >
                         
                         {reel &&
    reel.map((data, index) => {
        const newPath = data.url.split("\\").slice(1).join("\\");
        return (
          <div className='flex-reel'>
          <div className='individual-reel' key={index}>
          <video key={index}  onClick={()=>{handlePlay(index)}} className='reel' autoPlay muted={!vol} loop ref={(el) => (videoRefs.current[index] = el)} 
          
         >
         
                <source src={`http://localhost:3001/${newPath}`} type="video/mp4" />
                Your browser does not support the video tag.
            </video>
            <div className='post-Detail' style={{height: expanded[index] ? '150px' : '100px'}}>
                  
                  <div className='reel-user-icon-cont'>
                  <FontAwesomeIcon className='reel-user-icon' icon={faUser} />
                  </div>
                  <span className='reel-user-name'>{data.name}</span>
                  <div className="reel-foll-btn" >Follow</div>
                  <div className='reel-caption-cont'  style={{ height: expanded[index] ? '110px' : '20px', overflowY: expanded[index] ?  'scroll': 'hidden', transition: 'height 0.3s ease' }}>
                      <p style={{width:'300px', height: '20px' , color:'white'}}>{data.caption}</p> 
                  </div>
                  {!expanded[index] && data.caption.length>35 && <span className='more-btn' onClick={() => handleExp(index)}>More ...</span>}
                 

            </div>

            <div className='vol-btn' onClick={handleVol}>
            {vol?(<FontAwesomeIcon icon={faVolumeUp} style={{color:'white' }}/>):(<FontAwesomeIcon icon={faVolumeMute} style={{ color:'white' }} />)}
            </div>
           {play[index] &&<div className='play-btn'>
               <FontAwesomeIcon style={{color:'white'}} size='2x' icon={faPlay} />
            </div>}

           </div>
           <div className='reels-other-cont'>
                <div className='individual-icon'>
                <FontAwesomeIcon style={{color:color?'white':'#ff3a33', fontSize:'24px'} }  icon={faHeart} onClick={()=>{handleLike(data._id)}}/>
                <br></br>
                <span>Likes</span>
                </div>

                <div className='individual-icon'>
                <FontAwesomeIcon style={{ fontSize:'24px'} }   icon={faComment} />
                <br></br>
                <span>Comment</span>
                </div>

                <div className='individual-icon'>
                <FontAwesomeIcon  style={{fontSize:'24px'} }   icon={faPaperPlane}   />
                <br></br>
                <span>Share</span>
                </div>
           </div>
           </div>
        );
    })
}

                             </div>
                             </InfiniteScroll>}
                    </div>

               </div>
      </div>

      </div>
     
  )
}
